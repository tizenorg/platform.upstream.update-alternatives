.\" dpkg manual page - dpkg-buildflags(1)
.\"
.\" Copyright 息 2010-2011 Rapha谷l Hertzog <hertzog@debian.org>
.\" Copyright 息 2011 Kees Cook <kees@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-buildflags 1 2012\-04\-03 "Debian Project" "dpkg suite"
.SH 名前
パッケージのビルドの際に用いられるビルドフラグを返却する
.
.SH 書式
\fBdpkg\-buildflags\fP [\fIoption\fP...] [\fIcommand\fP]
.
.SH 説明
\fBdpkg\-buildflags\fP は、Debian パッケージのビルドの際に用いられるコンパイルオプションを示すツールである。
.
デフォルトのフラグはベンダによって定義されるが、いくつかの方法によって上書きすることができる。
.IP 1
システムワイドな \fB/etc/dpkg/buildflags.conf\fP
.IP 2
現在のユーザの \fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP。\fB$XDG_CONFIG_HOME\fPのデフォルトは
\fB$HOME/.config\fP である。
.IP 3
ユーザ毎に一時的に設定される環境変数の値 (\fB環境変数\fP セクションを参照のこと)。
.IP 4
パッケージのメンテナによって \fBdebian/rules\fPで設定された環境変数の値 (\fB環境変数\fP セクションを参照のこと)。
.P
設定ファイルには、二種類のディレクティブが含まれる。
.TP 
\fBSET\fP\fI flag value\fP
\fIflag\fP という名前のフラグの値を \fIvalue\fP で上書きする。
.TP 
\fBSTRIP\fP\fI flag value\fP
\fIflag\fP という名前のフラグから、\fIvalue\fP で指定されたビルドフラグを取り除く。
.TP 
\fBAPPEND\fP\fI flag value\fP
\fIflag\fP という名前のフラグに対して、\fIvalue\fP
で指定されたオプションを追加する。対象のフラグに値が設定されている場合は、追加する値の前にスペースを付加すること。
.TP 
\fBPREPEND\fP\fI flag value\fP
\fIflag\fP という名前のフラグに対して \fIvalue\fP
で指定されたオプションを値の先頭部分に付加する。対象のフラグに値が設定されている場合は、追加する値の後ろにスペースを付加すること。
.P
設定ファイルには、ハッシュ (#) から始まるコメント行を含めてもよい。空行は無視される。
.SH コマンド
.TP 
\fB\-\-dump\fP
標準出力に、すべてのコンパイルフラグとその値を出力する。1 行に 1 つのフラグが、等号記号でフラグ名と値とを区切った
("\fIflag\fP=\fIvalue\fP") 形式で出力される。これはデフォルトの動作である。
.TP 
\fB\-\-list\fP
現在のベンダによってサポートされるフラグの一覧を (1 行に 1 つずつ) 出力する。詳細については、\fBサポートされるフラグ\fP
セクションを参照のこと。
.TP 
\fB\-\-export=\fP\fIformat\fP
標準出力に、シェル形式 (\fIformat\fP が \fBsh\fP の場合) もしくは make 形式 (\fIformat\fP が make の場合)
で、定義済のすべてのコンパイルフラグをエクスポートする。\fIformat\fP が \fBconfigure\fP
の場合、出力形式は、\fB./configure\fP コマンドで使用可能な形式となる。\fIformat\fP の値が指定されない場合は \fBsh\fP
が仮定される。大文字から始まるコンパイルフラグのみが対象となる。それ以外のものは、現在の環境に適合していないものと見なされる。
.TP 
\fB\-\-get\fP\fI flag\fP
指定されたフラグの値を標準出力に出力する。フラグが存在している場合は 0、それ以外の場合は 1 が返却される。
.TP 
\fB\-\-origin\fP\fI flag\fP
\fB\-\-get\fP によって返却された値の提供元を表示する。フラグが存在している場合は 0、それ以外の場合は 1 が返却される。origin
は、以下の値のいずれかとなる:
.RS
.TP 
\fBvendor\fP
ベンダによって設定された本来のフラグ
.TP 
\fBsystem\fP
システムワイドな設定ファイルにより設定、変更されたフラグ
.TP 
\fBuser\fP
ユーザ毎の設定により設定、変更されたフラグ
.TP 
\fBenv\fP
環境固有の設定により設定、変更されたフラグ
.RE
.TP 
\fB\-\-query\-features\fP\fI area\fP
Print the features enabled for a given area. The only currently recognized
area is \fBhardening\fP. Exits with 0 if the area is known otherwise exits with
1.
.IP
The output format is RFC822 header\-style, with one section per feature.  For
example:
.IP
.nf
  Feature: pie
  Enabled: no

  Feature: stackprotector
  Enabled: yes
.fi
.TP 
\fB\-\-help\fP
利用方法を表示して終了する。
.TP 
\fB\-\-version\fP
バージョン情報を表示して終了する。
.
.SH サポートされるフラグ
.TP 
\fBCFLAGS\fP
C コンパイラのオプション。デフォルトの値はベンダによって設定されるが、\fI\-g\fP およびデフォルトの最適化レベル (通常 \fI\-O2\fP だが
\fBDEB_BUILD_OPTIONS\fP環境変数に \fInoopt\fP が設定されている場合は \fI\-O0\fP) も含まれている。
.TP 
\fBCPPFLAGS\fP
C プリプロセッサのオプション。デフォルト値: 未定義
.TP 
\fBCXXFLAGS\fP
C++ コンパイラのオプション。\fBCFLAFS\fP と同等
.TP 
\fBFFLAGS\fP
Fortran コンパイラのオプション。\fBCFLAFS\fP と同等
.TP 
\fBLDFLAGS\fP
実行ファイルもしくは共有オブジェクトのリンクの際にコンパイラに渡されるオプション (リンカが直接呼び出される場合は、\fB\-Wl\fP および \fB,\fP
がオプションから削除される)。デフォルト値: 未定義
.
.SH ファイル
.TP 
\fB/etc/dpkg/buildflags.conf\fP
システムワイドな設定ファイル
.TP 
\fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP もしくは \fB$HOME/.config/dpkg/buildflags.conf\fP
ユーザ毎の設定ファイル
.SH 環境変数
同じ動作を行う環境変数が 2 組存在する。1 つ目の (DEB_\fIflag\fP_\fIop\fP) を \fBdebian/rules\fP
内で用いてはならない。これは、デフォルトのフラグとは異なる設定でソースパッケージをリビルドしたいユーザ向けの設定である。2 つ目の方法
(DEB_\fIflag\fP_MAINT_\fIop\fP) は \fBdebian/rules\fP
内でのみ使用すべきである。これは、パッケージのメンテナがビルドフラグを変更する際に使用すること。
.TP 
\fBDEB_\fP\fIflag\fP\fB_SET\fP
.TQ
\fBDEB_\fP\fIflag\fP\fB_MAINT_SET\fP
この変数は、\fIflag\fP の値を強制的に設定したい場合に使用すること
.TP 
\fBDEB_\fP\fIflag\fP\fB_STRIP\fP
.TQ
\fBDEB_\fP\fIflag\fP\fB_MAINT_STRIP\fP
この変数は、\fIflag\fP の値から削除したいオプションがある場合に使用すること。削除したいオプションは、スペースで区切ったリスト形式で指定する。
.TP 
\fBDEB_\fP\fIflag\fP\fB_APPEND\fP
.TQ
\fBDEB_\fP\fIflag\fP\fB_MAINT_APPEND\fP
この変数は、\fIflag\fP の値に追加したいオプションがある場合に使用すること。
.TP 
\fBDEB_\fP\fIflag\fP\fB_PREPEND\fP
.TQ
\fBDEB_\fP\fIflag\fP\fB_MAINT_PREPEND\fP
この変数は、\fIflag\fP の値の先頭部分に追加したいオプションがある場合に使用すること。
.TP 
\fBDEB_BUILD_MAINT_OPTIONS\fP
この変数は、\fBhardening\fP オプションによるビルドフラグの様々な要塞化の有効化、無効化を行うために使用される。詳細は \fB要塞化\fP
セクションを参照のこと。
.
.SH 要塞化
幾つかのコンパイルタイムオプションを (以下で説明する)
使用することで、生成されるバイナリをメモリ破壊攻撃から保護したり、コンパイル時に追加の警告メッセージを表示させたりすることができる。以下で注記されていない限り、これらのオプションは、サポートされているアーキテクチャにおいて、デフォルトで有効化される。
.P
各要塞化機能は、\fBDEB_BUILD_MAINT_OPTIONS\fP 環境変数の \fBhardening\fP 値において "+" や "\-"
をつけることで有効化/無効化できる。例えば、"pie" 機能を有効化して "fortify" 機能を無効化する場合、\fBdebian/rules\fP
で次のように設定する:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,\-fortify
.P
特別な機能 \fBall\fP により、すべての要塞化機能を一度に有効化、無効化することができる。次のようにして、すべての機能を無効化した上で
"format" と "fortify" のみを有効化することができる:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=\-all,+format,+fortify
.
.TP 
\fBformat\fP
This setting (enabled by default) adds \fB\-Wformat \-Werror=format\-security\fP
to \fBCFLAGS\fP and \fBCXXFLAGS\fP. This will warn about improper format string
uses, and will fail when format functions are used in a way that represent
possible security problems. At present, this warns about calls to \fBprintf\fP
and \fBscanf\fP functions where the format string is not a string literal and
there are no format arguments, as in \fBprintf(foo);\fP instead of
\fBprintf("%s", foo);\fP This may be a security hole if the format string came
from untrusted input and contains "%n".
.
.TP 
\fBfortify\fP
This setting (enabled by default) adds \fB\-D_FORTIFY_SOURCE=2\fP to
\fBCPPFLAGS\fP. During code generation the compiler knows a great deal of
information about buffer sizes (where possible), and attempts to replace
insecure unlimited length buffer function calls with length\-limited
ones. This is especially useful for old, crufty code.  Additionally, format
strings in writable memory that contain '%n' are blocked. If an application
depends on such a format string, it will need to be worked around.

このオプションが効果を発揮するためには、ソースコードは \fB\-O1\fP 以上でコンパイルされている必要がある。
.TP 
\fBstackprotector\fP
この設定 (デフォルト有効) により、\fBCFLAGS\fP および \fBCXXFLAGS\fP に \fB\-fstack\-protector
\-\-param=ssp\-buffer\-size=4\fP
が追加される。これにより、スタックの上書きに対する安全性チェックが追加され、多くの潜在的なコードインジェクション攻撃が抑止される。(アプリケーションにもよるが)
最良のケースでは、コードインジェクションの脆弱性を単なるサービス拒否に留めたり、無力化したりすることができる。

この機能は、glibc (もしくは \fB__stack_chk_fail\fP を提供する他の実装) へのリンクが必要であるため、\fB\-nostdlib\fP
や \fB\-ffreestanding\fP といったオプションでビルドする際には、無効にする必要がある。
.
.TP 
\fBrelro\fP
This setting (enabled by default) adds \fB\-Wl,\-z,relro\fP to \fBLDFLAGS\fP.
During program load, several ELF memory sections need to be written to by
the linker. This flags the loader to turn these sections read\-only before
turning over control to the program. Most notably this prevents GOT
overwrite attacks. If this option is disabled, \fBbindnow\fP will become
disabled as well.
.
.TP 
\fBbindnow\fP
This setting (disabled by default) adds \fB\-Wl,\-z,now\fP to \fBLDFLAGS\fP. During
program load, all dynamic symbols are resolved, allowing for the entire PLT
to be marked read\-only (due to \fBrelro\fP above). The option cannot become
enabled if \fBrelro\fP is not enabled.
.
.TP 
\fBpie\fP
この設定 (デフォルト無効) は \fBCFLAGS\fP および \fBCXXFLAGS\fP に \fB\-fPIE\fP を追加し、\fBLDFLAGS\fP に
\fB\-fPIE \-pie\fP を追加する。PIE (位置独立実行形式) は、幾つかのカーネルバージョンでサポートされるアドレス空間配置のランダム化
(ASLR) を行う上で必要となる。スタックとヒープ (brk とmmap) 内のデータ領域では、ASLR
が既に必須となっているが、コード領域も位置独立でコンパイルされる必要がある。共有ライブラリでは、(\-fPIC)
によりこれが既に行われているので、自動的に ASLR が行われるが、バイナリの .text 領域は ASLR を行うために、PIE
でビルドされる必要がある。これが実現すると、メモリ破壊攻撃を行う際にリターンさせる先のアドレスが静的ではなくなるため、ROP (Return
Oriented Programming) 攻撃が、より困難となる。

これは \fB\-fPIC\fP と互換性がないため、共有ライブラリをビルドする際は、設定を行わないよう注意すること

加えて、PIE は汎用レジスタにより実装されているため、幾つかのアーキテクチャ (特に注意すべきは i386) では、text
セグメントの負荷が高いアプリケーションにおいて最大 15% 程度のパフォーマンス低下が見込まれる。もっとも、大半の場合、パフォーマンス低下は 1%
未満である。多くの汎用レジスタを有するアーキテクチャ (amd64 など) では、前述した最悪の場合であっても問題は発生しない。
.SH 翻訳者
高橋 基信 <monyo@monyo.com>.
喜瀬 浩 <kise@fuyuneko.jp>.
関戸 幸一 <sekido@mbox.kyoto-inet.or.jp>.
鍋谷 栄展 <nabe@debian.or.jp>.
倉澤 望 <nabetaro@debian.or.jp>.
石川 睦 <ishikawa@linux.or.jp>.
鵜飼 文敏 <ukai@debian.or.jp>.
中野 武雄 <nakano@apm.seikei.ac.jp>.
.SH 翻訳校正
Debian JP Documentation ML <debian-doc@debian.or.jp>.
